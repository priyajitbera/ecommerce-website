openapi: 3.0.1
info:
  title: Facade Service
  version: v0
servers:
  - url: http://localhost:8080
    description: Generated server url
tags:
  - name: FacadeService
paths:
  /product-catalog-service/v1/product:
    get:
      tags:
        - product-controller-v-1
      operationId: findProducts
      parameters:
        - name: productIds
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: productNamePart
          in: query
          required: false
          schema:
            type: string
        - name: produdctCategoryIds
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: productCategoryNames
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: pageIndex
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
    post:
      tags:
        - product-controller-v-1
      operationId: createProduct
      parameters:
        - $ref: '#/components/parameters/UserToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ProductModel'
    patch:
      tags:
        - product-controller-v-1
      operationId: updateProduct
      parameters:
        - $ref: '#/components/parameters/UserToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ProductModel'
  /product-catalog-service/v1/product/sellers:
    get:
      tags:
        - product-controller-v-1
      operationId: findSellersProducts
      parameters:
        - $ref: '#/components/parameters/UserToken'
        - name: productIds
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: productNamePart
          in: query
          required: false
          schema:
            type: string
        - name: produdctCategoryIds
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: productCategoryNames
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: pageIndex
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SellersProductList'
  /product-catalog-service/v1/product/elastic-search/index:
    post:
      tags:
        - product-controller-v-1
      operationId: indexProductsInElasticSearch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexProductsInElasticSearchDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/IndexedProductList'
    delete:
      tags:
        - product-controller-v-1
      operationId: deIndexProductsInElasticSearch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexProductsInElasticSearchDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/IndexedProductList'
  /product-catalog-service/v1/product-image:
    post:
      tags:
        - product-image-controller-v-1
      operationId: uploadProductImages
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadProductImagesDto'
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UploadProductImagesModel'
  /product-catalog-service/v1/product-category:
    get:
      tags:
        - product-category-controller-v-1
      operationId: findProductCategories
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: name
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductCategoryModel'
    post:
      tags:
        - product-category-controller-v-1
      operationId: createProductCategories
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateProductCategoryDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductCategoryModel'
  /product-catalog-service/v1/currency:
    get:
      tags:
        - currency-controller-v-1
      operationId: findCurrencies
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: name
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CurrencyModel'
    post:
      tags:
        - currency-controller-v-1
      operationId: createCurrencies
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateCurrencyDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CurrencyModel'
  /product-catalog-service/v1/product/search:
    get:
      tags:
        - product-controller-v-1
      operationId: search
      parameters:
        - name: searchKeyword
          in: query
          required: true
          schema:
            type: string
        - name: pageIndex
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
  /product-catalog-service/v1/product/find-one:
    get:
      tags:
        - product-controller-v-1
      operationId: findOneById
      parameters:
        - name: productId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ProductModel'
  /user-management-service/v1/auth/verify-email:
    post:
      tags:
        - auth-controller-v-1
      operationId: verifyEamil
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/VerifyEmailModel'
  /user-management-service/v1/auth/signup:
    post:
      tags:
        - auth-controller-v-1
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SignupModel'
  /user-management-service/v1/auth/request-email-verification-secret:
    post:
      tags:
        - auth-controller-v-1
      operationId: requestEmailVerificationSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestEmailVerificationSecretDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RequestEmailVerificationSecretModel'
  /user-management-service/v1/auth/login:
    post:
      tags:
        - auth-controller-v-1
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LoginModel'
  /user-management-service/v1/auth/get-user-details-from-token:
    post:
      tags:
        - auth-controller-v-1
      operationId: getUserDetailsFromUserToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserDetailsRequestDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserDetailsModel'
  /user-management-service/v1/user:
    get:
      tags:
        - user-controller-v-1
      operationId: findUsers
      parameters:
        - name: userIds
          in: query
          required: true
          schema:
            type: array
            items:
              type: integer
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FindUserModel'
  /user-management-service/v1/user/find-one:
    get:
      tags:
        - user-controller-v-1
      operationId: findUser
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/FindUserModel'
  /user-management-service/v1/user/by-email:
    get:
      tags:
        - user-controller-v-1
      operationId: findUsersByEmailIds
      parameters:
        - name: emailIds
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FindUserModel'
  /user-management-service/v1/auth/check-email-id-available:
    get:
      tags:
        - auth-controller-v-1
      operationId: checkEmailIdAvailable
      parameters:
        - name: emailId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CheckEmailIdAvailableModel'
  /cart-service/v1/cart:
    get:
      tags:
        - cart-controller-v-1
      operationId: findCart
      parameters:
        - $ref: '#/components/parameters/UserToken'
        - name: userId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CartModel'
    post:
      tags:
        - cart-controller-v-1
      operationId: createCart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCartDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CartModel'
  # cart-service endpoints
  /cart-service/v1/cart/update-cart-product-quantity:
    post:
      tags:
        - cart-controller-v-1
      operationId: updateCartProductQuantity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCartProductQuantityDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CartModel'
  /cart-service/v1/cart/with-value:
    get:
      tags:
        - cart-controller-v-1
      operationId: findCartWithValue
      parameters:
        - $ref: '#/components/parameters/UserToken'
        - name: userId
          in: query
          required: true
          schema:
            type: string
        - name: currency
          in: query
          required: false
          schema:
            type: string
            default: INR
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CartWithValueModel'
  /order-management-service/v1/order/post-delivery-update:
    post:
      tags:
        - order-controller-v-1
      operationId: postDeliveryUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDeliveryUpdateDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OrderModel'
  /order-management-service/v1/order/:
    post:
      tags:
        - order-controller-v-1
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OrderModel'
  /order-management-service/v1/order/update-delivery-status:
    patch:
      tags:
        - order-controller-v-1
      operationId: updateDeliveryStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeliveryStatusDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OrderModel'
  /order-management-service/v1/order/user-orders:
    get:
      tags:
        - order-controller-v-1
      operationId: findUserOrders
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 5
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PageOrderModel'
  /order-management-service/v1/order/find-one:
    get:
      tags:
        - order-controller-v-1
      operationId: findOrder
      parameters:
        - name: orderId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OrderModel'
components:
  # common parameters
  parameters:
    UserToken:
      name: Authorization
      in: header
      schema:
        type: string
      required: true
  schemas:
    ResponseVoid:
      type: object
      properties:
        data:
          type: object
        error:
          type: string
    CreateProductDto:
      required:
        - currencyId
        - description
        - price
        - taggedCategoryIds
        - title
      type: object
      properties:
        title:
          type: string
        price:
          minimum: 0
          type: number
        currencyId:
          type: string
        description:
          type: string
        taggedCategoryIds:
          type: array
          items:
            type: string
        productImageIds:
          type: array
          items:
            type: string
    ProductCategoryModel:
      type: object
      properties:
        id:
          type: string
        createdOn:
          type: string
          format: date-time
        lastModifiedOn:
          type: string
          format: date-time
        name:
          type: string
    ProductImageModel:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
    ProductModel:
      type: object
      properties:
        id:
          type: string
        createdOn:
          type: string
          format: date-time
        lastModifiedOn:
          type: string
          format: date-time
        title:
          type: string
        price:
          $ref: '#/components/schemas/ProductPriceModel'
        description:
          type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImageModel'
        taggedCategories:
          type: array
          items:
            $ref: '#/components/schemas/ProductCategoryModel'
        productIndexingInfo:
          $ref: "#/components/schemas/ProductIndexingInfoModel"
    SellersProductModel:
      type: object
      properties:
        id:
          type: string
        createdOn:
          type: string
          format: date-time
        lastModifiedOn:
          type: string
          format: date-time
        title:
          type: string
        price:
          $ref: '#/components/schemas/ProductPriceModel'
        description:
          type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImageModel'
        taggedCategories:
          type: array
          items:
            $ref: '#/components/schemas/ProductCategoryModel'
        productIndexingInfo:
          $ref: "#/components/schemas/ProductIndexingInfoModel"
        createdBy:
          $ref: "#/components/schemas/UserModel"
        lastModifiedBy:
          $ref: "#/components/schemas/UserModel"
    ProductPriceModel:
      type: object
      properties:
        price:
          type: number
        currency:
          $ref: '#/components/schemas/CurrencyModel'
    IndexProductsInElasticSearchDto:
      type: object
      properties:
        productIds:
          type: array
          items:
            type: string
    IndexedProductList:
      type: object
      properties:
        indexedProducts:
          type: array
          items:
            $ref: '#/components/schemas/IndexedProductModel'
    UploadProductImagesDto:
      type: object
      properties:
        productId:
          type: string
        imageFiles:
          type: array
          items:
            type: string
            format: binary
    UploadProductImagesModel:
      type: object
      properties:
        productId:
          type: string
        productImages:
          type: array
          items:
            $ref: '#/components/schemas/ProductImageModel'
    CreateProductCategoryDto:
      type: object
      properties:
        name:
          type: string
        parentCategoryId:
          type: string
    CreateCurrencyDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        symbol:
          type: string
        shortSymbol:
          type: string
    CurrencyModel:
      type: object
      properties:
        id:
          type: string
        createdOn:
          type: string
          format: date-time
        lastModifiedOn:
          type: string
          format: date-time
        name:
          type: string
        symbol:
          type: string
        shortSymbol:
          type: string
    UpdateProductDto:
      required:
        - productId
      type: object
      properties:
        productId:
          type: string
        title:
          type: string
        price:
          type: number
        currencyId:
          type: string
        description:
          type: string
        taggedCategoryIds:
          type: array
          items:
            type: string
        productImageIds:
          type: array
          items:
            type: string
    PaginatedProductList:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductModel'
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
    SellersProductList:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/SellersProductModel'
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
    VerifyEmailDto:
      type: object
      properties:
        userId:
          type: integer
        emailVerificationSecret:
          type: string
    VerifyEmailModel:
      type: object
      properties:
        userId:
          type: integer
        emailId:
          type: string
        verificationStatus:
          type: string
          enum:
            - NOT_VERIFIED
            - VERIFIED
        verifiedOn:
          type: string
          format: date-time
    SignupDto:
      required:
        - emailId
        - name
        - password
        - signUpAsSeller
      type: object
      properties:
        signUpAsSeller:
          type: boolean
        emailId:
          type: string
        name:
          type: string
        password:
          type: string
    SignupModel:
      type: object
      properties:
        userId:
          type: integer
        emailId:
          type: string
        name:
          type: string
    RequestEmailVerificationSecretDto:
      type: object
      properties:
        userId:
          type: integer
    RequestEmailVerificationSecretModel:
      type: object
      properties:
        userId:
          type: integer
        status:
          type: string
          enum:
            - SUCCESS
            - FAILURE
            - UNKNOWN
        message:
          type: string
    LoginDto:
      required:
        - password
        - userIdentifer
      type: object
      properties:
        userIdentifer:
          type: string
        password:
          type: string
    LoginModel:
      type: object
      properties:
        status:
          type: string
          enum:
            - SUCCESS
            - FAILED
        message:
          type: string
        userId:
          type: integer
        name:
          type: string
        emailId:
          type: string
        roles:
          type: array
          items:
            type: string
        token:
          type: string
    GetUserDetailsRequestDto:
      required:
        - token
      type: object
      properties:
        token:
          type: string
    UserDetailsModel:
      type: object
      properties:
        userId:
          type: string
        roles:
          type: array
          items:
            type: string
    FindUserModel:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        name:
          type: string
    CheckEmailIdAvailableModel:
      type: object
      properties:
        emailId:
          type: string
        available:
          type: boolean
    # cart-service schemas
    CreateCartDto:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
    CartModel:
      type: object
      properties:
        cartId:
          type: string
        userId:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/CartProductModel'
    CartProductModel:
      type: object
      properties:
        productId:
          type: string
        productTitle:
          type: string
        quantity:
          type: integer
          format: int64
    UpdateCartProductQuantityDto:
      required:
        - cartId
        - operation
        - productId
        - quantity
      type: object
      properties:
        cartId:
          type: string
        productId:
          type: string
        quantity:
          minimum: 1
          type: integer
          format: int64
        operation:
          type: string
          enum:
            - INCREASE
            - DECREASE
            - REMOVE
    CartWithValueModel:
      type: object
      properties:
        cartId:
          type: string
        userId:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/CartProductModel'
        cartValue:
          type: number
        currency:
          type: string
    ProductIndexingInfoModel:
      type: object
      properties:
        isIndexedOnElasticSearch:
          type: boolean
        elasticSearchIndexedOn:
          type: string
          format: date-time
    IndexedProductModel:
      type: object
      properties:
        id:
          type: string
        productIndexingInfo:
          $ref: '#/components/schemas/ProductIndexingInfoModel'
    UserModel:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    PostDeliveryUpdateDto:
      type: object
      properties:
        orderId:
          type: string
        message:
          type: string
    CardInfoModel:
      type: object
      properties:
        cardType:
          type: string
          enum:
            - CREDIT
            - DEBIT
        cardNumber:
          type: string
        bankName:
          type: string
        cardHolderName:
          type: string
    DeliveryAddressModel:
      type: object
      properties:
        buildingNumber:
          type: string
        houseNumber:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        landMark:
          type: string
        contactNumber1:
          type: string
        contactNumber2:
          type: string
        city:
          type: string
        pincode:
          type: integer
          format: int32
    DeliveryInfoModel:
      type: object
      properties:
        deliveryStatus:
          type: string
          enum:
            - NEW
            - PACKAGED
            - SHIPPED
            - OUT_FOR_DELIVERY
            - DELIVERED
        deliveryUpdates:
          type: array
          items:
            $ref: '#/components/schemas/DeliveryUpdateModel'
        deliveryAddress:
          $ref: '#/components/schemas/DeliveryAddressModel'
    DeliveryUpdateModel:
      type: object
      properties:
        timeStamp:
          type: string
          format: date-time
        message:
          type: string
    OrderItemModel:
      type: object
      properties:
        productId:
          type: string
        productTitle:
          type: string
        quantity:
          type: integer
          format: int64
        productUnitPrice:
          type: number
        orderItemValue:
          type: number
    OrderModel:
      type: object
      properties:
        orderId:
          type: string
        createdOn:
          type: string
          format: date-time
        userId:
          type: string
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemModel'
        orderTotal:
          type: number
        deliveryInfo:
          $ref: '#/components/schemas/DeliveryInfoModel'
        paymentInfo:
          $ref: '#/components/schemas/PaymentInfoModel'
        orderStatus:
          type: string
          enum:
            - NEW
            - CONFIRMED
    PaymentInfoModel:
      type: object
      properties:
        paymentId:
          type: string
        paymentMode:
          type: string
          enum:
            - CASH_ON_DELIVERY
            - CARD
            - UPI
        paymentStatus:
          type: string
          enum:
            - REQUESTED
            - FAILED
            - COMPLETED
        cardInfo:
          $ref: '#/components/schemas/CardInfoModel'
        upiInfo:
          $ref: '#/components/schemas/UpiInfoModel'
        paymentGatewayLink:
          type: string
    UpiInfoModel:
      type: object
      properties:
        upiId:
          type: string
    CardInfo:
      type: object
      properties:
        cardType:
          type: string
          enum:
            - CREDIT
            - DEBIT
        cardNumber:
          type: string
        bankName:
          type: string
        validUptoMonth:
          type: integer
          format: int32
        validUptoYear:
          type: integer
          format: int32
        cvv:
          type: string
        cardHolderName:
          type: string
    CreateOrderDto:
      type: object
      properties:
        userId:
          type: string
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemDto'
        orderTotal:
          type: number
        deliveryAddress:
          $ref: '#/components/schemas/DeliveryAddressDto'
        paymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
    DeliveryAddressDto:
      type: object
      properties:
        buildingNumber:
          type: string
        houseNumber:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        landMark:
          type: string
        contactNumber1:
          type: string
        contactNumber2:
          type: string
        city:
          type: string
        pincode:
          type: integer
          format: int32
    OrderItemDto:
      type: object
      properties:
        productId:
          type: string
        quantity:
          type: integer
          format: int64
        productUnitPrice:
          type: number
        orderItemValue:
          type: number
    PaymentInfo:
      type: object
      properties:
        paymentMode:
          type: string
          enum:
            - CASH_ON_DELIVERY
            - CARD
            - UPI
        currency:
          type: string
        cardInfo:
          $ref: '#/components/schemas/CardInfo'
        upiInfo:
          $ref: '#/components/schemas/UpiInfo'
    UpiInfo:
      type: object
      properties:
        upiId:
          type: string
    UpdateDeliveryStatusDto:
      type: object
      properties:
        orderId:
          type: string
        deliveryStatus:
          type: string
          enum:
            - NEW
            - PACKAGED
            - SHIPPED
            - OUT_FOR_DELIVERY
            - DELIVERED
    PageOrderModel:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/OrderModel'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        paged:
          type: boolean
        unpaged:
          type: boolean
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean